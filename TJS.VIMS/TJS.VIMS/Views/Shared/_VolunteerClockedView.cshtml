@model TJS.VIMS.ViewModel.VolunteerClockedInOutViewModel

@{
    ViewBag.Title = "VolunteerClockedInOut";
}

<<!-- BKP create partial view -->
<div>
    <b>Case # @ViewBag.Case</b>
    You are now clocked in and may begin working.
    <p style="color:blue;font-size:36px;">@DateTime.Now.ToShortTimeString()</p>
    <b>@DateTime.Now.ToLongDateString()</b>
</div>

<br />
<br />

<div>
    <b>Most Recent Hours Worked</b>
    <br />
    <br>
    <table>
        @foreach (var v in ViewBag.RecentClockInfo)
        {
            <tr>
                <td>@v.ClockInDateTime.ToLongDateString() (@TJS.VIMS.Util.Utility.GetClockedInTime(v))</td>
            </tr>
        }
    </table>
</div>
<!-- BKP create partial view -->


<div>
    @RenderBody()
</div>
    

<div>
    <b>You have worked @TJS.VIMS.Util.Utility.GetTotalHours(ViewBag.RecentClockInfo) toward your goal of YYY hours.</b>
    <progress value="22" max="100"></progress>
    <b>You have XXX hours remaining.</b>
</div>
<div id="counter">30</div>
<script>
    setInterval(function () {
        var div = document.querySelector("#counter");
        var count = div.textContent * 1 - 1;
        div.textContent = count;
        if (count <= 0) {
                location.href = "@Url.Action("TimeClockLogIn", "VolunteerClockTime", new { id = ViewBag.LocationId })";
            }
        }, 1000);
</script>
<p>
    @Html.ActionLink("I need to clock out instead", "Index", new { id = Model.Volunteer.VolunteerId }) |
    @Html.ActionLink("Never mind, I just want to out out and return to the Home Screen", "Index")
</p>
